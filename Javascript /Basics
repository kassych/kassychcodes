const message = 'Hello Java Coder ? ' // Try edit me
//const document = message; will figure it out
// Update header text
//document.querySelector('#header').innerHTML = message; what is this?

// Log to console
//console.log(document); will edit once i learn more

// adding two variables
var number_1 = 54;
var number_2 = 34;

varsum = number_1 + number_2;
console.log(varsum);
//checking for unicode substitution
const message_1 = '\u0048\u0065\u006c\u006c\u006f';
console.log(message_1);
console.log(message_1 === 'Hello');
console.log(message_1.length);
// checking for length of unicode

let dollarSymbol = '$';
let smileyEmoji = 'ðŸ˜€';

console.log(`The length of the dollar symbol is : ${dollarSymbol.length}`);
console.log(`the length of smiley Emoji is : ${smileyEmoji.length}`);
console.log(smileyEmoji);

//from code point usage; where you get strings from unicode and have them displayed--i think

String.fromCodePoint(9733)
String.fromCodePoint(9842)
console.log(String.fromCodePoint(0x2f804))

console.log(String.fromCodePoint(9733, 9842, 0x2f804))

//array of code points

const myCodePoints = [9733, 9842, 7786, 5562, 9877, 2323, 4641, 7389];

// using the spread operator
const arrayCodePoints = String.fromCodePoint(...myCodePoints);
console.log(arrayCodePoints);

// getting to identify character code points in a message

const message_2 = "hi kassych";
const codePointArray = [];
for (let k = 0; k < message_2.length; k++) {
    let codePoint = message_2.codePointAt(k);
    codePointArray[k] = codePoint;
    //returning the message_2 constant
    console.log(String.fromCodePoint(...codePointArray));
}

//exploring different string methods

//repeat

const A = ("woof ");
const repeatValue = A.repeat(3);
console.log(repeatValue);

// exploring trim()
const B = (" woof ")
let B_trimmed = B.trim()
console.log(B_trimmed);

//exploring trimStart() and trimEnd()

const C = ("    hi, there. Checking out this awesomeness      ");
let C_start = C.trimStart();
let C_end = C.trimEnd();
let C_trim = C.trim();
console.log(C_start);
console.log(C_end);
console.log(C_trim);

// begin of padding
const first = "siberia";
const second = first.padStart(10);
const third = first.padEnd(10);
const fourth = first.padStart(20, '*');
console.log(first);
console.log(second); //output
console.log(third);
console.log(first.length);//checking length
console.log(second.length);
console.log(third.length);
console.log(fourth);

// converting to uppercase

const first_name = "Graham";
const second_name = "Kasindo";
const first_upper = first_name.toUpperCase();
const second_upper = second_name.toUpperCase();
console.log(first_upper);
console.log(second_upper);

console.log(second_upper.length) //length property

//strings and arrays are the same in that they have indexes.

console.log(second_upper[2]);
console.log("First Name last Character is ;" + first_upper[first_upper.length - 1]) // picking the last character of the first name

// using charAt()method for the same

const age = "Iam 6 years old.";
const index = 4;
console.log(`The value that is indicated at ${index, " the chosen location"} is ${age.charAt(index)} years old`);
//finding out the last letter in a sentence or word
const lastletter = age.charAt(age.length - 2);
console.log(`The last character is letter  ` + lastletter);

// using includes() method()

const car = "Datsun";
if (car.includes("Datsun")) {
    console.log("The car called " + car + " has been found")
} else {
    console.log("No such car named  " + car + " here");
}

// working with the slice

const country = "KENYA";
console.log(country.slice(0, 3));

//using the replace()

const original = "System Administrator";
const updated = original.replace('System', 'Database');
console.log(original);
console.log(updated);

// using the split()
let text = "National Insurance Agency";
const splittedText = text.split(" ");
console.log(splittedText[1]); // picking from the splitted array

// using concat()

const word1 = "Kenya "; //add a space for readability... imagine a sentence, paragraph..
const word2 = "Power"
const complete = word1.concat(word2);
console.log(complete);

//searching a string using regex

let statement = " I saw kassych using the elevator this morning";
const check = statement.match(/kassych/g); //the expression to search for
console.log(check); // if not found the result is null

// using normalize() which has four forms that can be utilized

let symbol_1 = `\u03a9`;
let symbol_2 = `\u2126`;

console.log(symbol_1);
console.log(symbol_2);
console.log(symbol_1 === symbol_2); // comparison shows they are not of the same codepoint  even though they have same output. 
console.log(symbol_1.codePointAt());
console.log(symbol_2.codePointAt());

//need to normalize though

const symbolOneNormalized = symbol_1.normalize('NFD'); //using canonical decomposition on both
const symbolTwoNormalized = symbol_2.normalize('NFD');
console.log(symbolOneNormalized === symbolTwoNormalized); //strict comparison check
console.log(symbolOneNormalized);
console.log(symbolTwoNormalized);
console.log(symbolOneNormalized.codePointAt());
console.log(symbolTwoNormalized.codePointAt());

//REGULAR EXPRESSIONS

//creating a regular expression object using literals
const text = "When in Rome, do what the Romans do";

let myRegExpObject = /e/i; // looking for the text Rome-with insensitive flag
console.log(myRegExpObject.test(text));

// creating a regular expression object using the RegExp Class
const text2 = "If you find yourself in Rome, I suppose you could check out the town";

let myRegExpObject2 = new RegExp('Rome'); //regexp constructor
console.log(myRegExpObject2.test(text2));


//more practice on regexp

const words = "life,michael,lime,lame,fish,lick,lone,little"; //my string sentence
const pick = /l..k/g; //regexp to match starting with l and end with e with four char
console.log(words.match(pick)); //will match only the words.

const kes = "200.00,250.00,800.00,1000.00,220.00,640.00,975.00,2.00";
const kesexp = /2\../g;//singling out one number using escape character \
console.log(kes.match(kesexp));





























































